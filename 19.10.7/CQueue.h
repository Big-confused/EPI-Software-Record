#ifndef _CQUEUE_H_
#define _CQUEUE_H_

#include<stdio.h>
#include<malloc.h>

#define CQueueData int
#define CQueueMaxSize 1024

typedef struct
{
	CQueueData Data[CQueueMaxSize];
	int front;
	int rear;
	int num;
}CQueue;

/*==================================================================
*功能：创建循环队列
*输出：返回新建循环队列的地址
==================================================================*/
CQueue* Init_CQueue();

/*==================================================================
*功能：查询队列的长度
*输入：sq为循环队列的地址
*输出：返回循环队列的长度，错误返回-1
==================================================================*/
int Count_CQueue(CQueue* cq);

/*==================================================================
*功能：出循环队列
*输入：sq为循环队列的地址，Data为存放输出元素的位置
*输出：成功返回1，失败返回0
==================================================================*/
int Out_CQueue(CQueue* cq, CQueueData* Data);

/*==================================================================
*功能：入循环队列
*输入：sq为循环队列的地址，Data为需要输入的元素
*输出：成功返回1，失败返回0
==================================================================*/
int In_CQueue(CQueue* cq, CQueueData Data);

/*==================================================================
*功能：取循环队列头部的元素
*输入：sq为循环队列的地址，Data为存储循环队列头部的元素
*输出：成功返回1，失败返回0
==================================================================*/
int GetFront_CQueue(CQueue* cq, CQueueData* Data);

/*==================================================================
*功能：清空循环队列
*输入：sq为循环队列的地址
*输出：成功返回1，失败返回0
==================================================================*/
int Clear_CQueue(CQueue* cq);

/*==================================================================
*功能：销毁循环队列
*输入：sq为指向循环队列的指针的地址
*输出：成功返回1，失败返回0
==================================================================*/
int Destory_CQueue(CQueue** cq);

#endif
